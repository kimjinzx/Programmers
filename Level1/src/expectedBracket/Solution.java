package expectedBracket;

// △△ 게임대회가 개최되었습니다. 이 대회는 N명이 참가하고, 토너먼트 형식으로 진행됩니다. N명의 참가자는 각각 1부터 N번을 차례대로 배정받습니다.
// 그리고, 1번↔2번, 3번↔4번, ... , N-1번↔N번의 참가자끼리 게임을 진행합니다. 각 게임에서 이긴 사람은 다음 라운드에 진출할 수 있습니다.
// 이때, 다음 라운드에 진출할 참가자의 번호는 다시 1번부터 N/2번을 차례대로 배정받습니다.
// 만약 1번↔2번 끼리 겨루는 게임에서 2번이 승리했다면 다음 라운드에서 1번을 부여받고,
// 3번↔4번에서 겨루는 게임에서 3번이 승리했다면 다음 라운드에서 2번을 부여받게 됩니다. 게임은 최종 한 명이 남을 때까지 진행됩니다.

// 이때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 궁금해졌습니다.
// 게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B가 함수 solution의 매개변수로 주어질 때,
// 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 return 하는 solution 함수를 완성해 주세요.
// 단, A번 참가자와 B번 참가자는 서로 붙게 되기 전까지 항상 이긴다고 가정합니다.

// 제한사항
// N : 21 이상 220 이하인 자연수 (2의 지수 승으로 주어지므로 부전승은 발생하지 않습니다.)
// A, B : N 이하인 자연수 (단, A ≠ B 입니다.)

// 입출력 예
// N	A	B	answer
// 8	5	7	3
// 입출력 예 설명
// 첫 번째 라운드에서 4번 참가자는 3번 참가자와 붙게 되고, 7번 참가자는 8번 참가자와 붙게 됩니다.
// 항상 이긴다고 가정했으므로 4번 참가자는 다음 라운드에서 2번이 되고, 7번 참가자는 4번이 됩니다.
// 두 번째 라운드에서 2번은 1번과 붙게 되고, 4번은 3번과 붙게 됩니다. 항상 이긴다고 가정했으므로 2번은 다음 라운드에서 1번이 되고,
// 4번은 2번이 됩니다. 세 번째 라운드에서 1번과 2번으로 두 참가자가 붙게 되므로 3을 return 하면 됩니다.


public class Solution {
    public int solution(int n, int a, int b) { // 8 5 7
        int answer = 0;

        while (a != b){ // 서로 같을 경우
            a = a/2 + a%2;
            b = b/2 + b%2;
            // 모든 값/2는 현재의 토너먼트에서 다음 대진표를 생성해줌
            // (a/2)+(a%2) (1/2+0=0  2/2+0=1  3/2+1=2  4/2+0=2  5/2+1=3  6/2+0=3  7/2+1=4  8/2+0=4)
            // 이때 홀수만이 a%2=1의 값을 가짐 (짝수 홀수 구분)
            // 계속 도출되는 a와b의 값을 가지고 반복중, a와 b가동일한 값이 되면 break

            // 추가설명)
            // 짝수일 땐 바로 전 홀수와 매치가 되고, 홀수일 땐 바로 다음 짝수와 매치가 된다는 뜻
            // 이렇게 a,b가 짝수 홀수일 경우를 계산하여 서로 붙을 때 까지를 반복하는 반복문
            // a = 5-> 3-> 2
            // b = 7-> 4-> 2

            answer++; // +1 +1 +1
        }
                return answer;

    }
}
