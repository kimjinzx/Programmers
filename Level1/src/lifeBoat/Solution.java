package lifeBoat;

//문제 설명
// 무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.

// 예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면
// 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.
// 구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.
// 사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때,
// 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.

// 제한사항
// 무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
// 각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
// 구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
// 구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.

// 입출력 예
// people	         limit	    return
// [70, 50, 80, 50]	 100	    3
// [70, 80, 50]	     100	    3

import java.util.Arrays;
public class Solution {
    public int solution(int[] people, int limit) { // [70, 50, 80, 50], 100
        int answer = 0;
        int min = 0;
        Arrays.sort(people); // 최소값과 최대값을 구분하기 위한 오름차순 정렬 [50,50,70,80]

        for (int max = people.length-1; max>=min; max--) { // max=3이며 max의 값이 min과 같아질때까지 반복루프
                                                           // 루프 반복할 때마다 max값을 증감시키기
            if (people[max] + people[min] <= limit) {
                min++;
                answer++;
            }else {
                answer++;
            }
            // ex) 80+50(0)<=100 조건에 부합하지 않으므로 80은 혼자 가야함(answer+1)
            // 루프를 돌며 max는 -1이 됨, 고로 70+50(0)<=100, 70도 혼자 가야함(answer+1)
            // 50(1)+50(0) <= 100 조건에 부합되어 min증분(answer+1)
            // 이때 max는 계속 증감되어 결국 max>=min이 되므로 반복문 중단
            // max= 3->2->1
            // min= 0->0->1
        }
        return answer;
    }
}

